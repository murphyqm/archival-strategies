[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Building Sustainable Open-Source Dashboards",
    "section": "",
    "text": "This workshop teaches sustainable open-source dashboard development using free tools with a focus on long-term archival strategies. Participants learn about accessible, maintainable dashboards that survive project funding cycles through proper documentation, containerisation, and community-driven maintenance approaches, ensuring content remains available beyond initial development periods.\nThe workshop will highlight different tools and strategies, and will include group discussions, and the development of a shared resource for future reference. Hopefully this workshop will generate new ideas and workflows for the community to use!"
  },
  {
    "objectID": "index.html#table-of-contents",
    "href": "index.html#table-of-contents",
    "title": "Building Sustainable Open-Source Dashboards",
    "section": "Table of contents",
    "text": "Table of contents\n\nIntroduction - what’s the problem?\nLeveraging sustainable software development workflows\nCommunity and collaboration\nGetting creative\nWhen should be stop supporting a dashboard?"
  },
  {
    "objectID": "index.html#workshop-content",
    "href": "index.html#workshop-content",
    "title": "Building Sustainable Open-Source Dashboards",
    "section": "Workshop content",
    "text": "Workshop content\nI’ve create a brief introductory presentation, and then we’ll get into discussing the various options and ideas I’ve added to the resources list. You can provide feedback/suggestions/ideas via the GitHub discussions (requires a GitHub account), or via the VeVox Q&A (doesn’t require registering/an account).\nHopefully, we’ll be able to add to this document over time and build a resource for researchers looking for strategies around sustaining dashboards. See our contribution guide in the repository ReadMe file."
  },
  {
    "objectID": "index.html#slides",
    "href": "index.html#slides",
    "title": "Building Sustainable Open-Source Dashboards",
    "section": "Slides",
    "text": "Slides\n\nPDF slides\nPowerPoint slides (direct download)"
  },
  {
    "objectID": "list.html#build-to-last",
    "href": "list.html#build-to-last",
    "title": "Resource List",
    "section": "1. Build to last",
    "text": "1. Build to last\nTake approaches used generally in sustainable research software development to make projects more robust.\n\nVersion Control Systems, git\n\nRecords all changes to the project, time stamped, with a unique identifier\n\nA record of who changed what, and when\n\nMakes the build process open to allow for replication and reproduction of the work\nAllows people to “reverse engineer” the work\nMore powerful when in a public repository, like on GitHub\n\n\nResources\n\nFAIR Software: use a publicly accessible repository with version control\nVersion Control: your digital lab notebook (an introduction to git)\n\n\n\nRelated\n\nGitHub\n\n\n\n\nGitHub\nThe resources listed below are free at time of writing, with usage limits.\n\nPublic repository with git version control, for long-term accessibility\nAutomated CI/CD workflows via GitHub Actions for testing, building, and deploying dashboards - can automatically update data, run tests, and deploy to hosting platforms\nFree static website hosting directly from repositories - ideal for hosting documentation, simple dashboards, or project websites\nCloud-based development environments (via Codespaces) that allow contributors to work on projects without local setup, lowering barriers to collaboration\nRelease tagging: integrations with Zenodo for minting DOIs against releases\n\n\nResources\n\nGitHub Pages Documentation\nGitHub Actions for Continuous Integration\nBuilding Communities with GitHub Discussions\n\n\n\nRelated\n\nVersion Control Systems, git\n\n\n\n\nDependency management\n\nLock specific versions of packages and dependencies to ensure dashboards work consistently across different machines and time periods\nCreate isolated environments to prevent conflicts between different projects\nModern tools support Windows, macOS, and Linux, making collaboration easier across diverse teams\nTools like pixi provide fast environment setup, reducing barriers for new contributors\nAutomatic resolution of complex dependency trees prevents version conflicts that could break dashboards over time\nShare exact environment specifications through small configuration files rather than large binary packages\nTools like miniforge prioritize packages commonly used in research and data science workflows\n\n\nResources\n\nMiniforge - Minimal conda installer\nPixi - Fast package management\nConda-forge - Community-driven conda packages\n\n\n\nRelated\n\nContainerisation\nVersion Control Systems, git\n\n\n\n\nContainerisation\n\nPackage entire dashboard applications with all dependencies into portable containers that run consistently across different systems\nIsolate dashboards from host system changes, protecting against software updates that might break functionality\nEnable easy deployment to cloud platforms, university servers, or personal computers without complex setup procedures\nPreserve exact runtime environments for long-term reproducibility - containers can be archived and run years later\nSupport automated deployment pipelines that can rebuild and redeploy dashboards from source code\n\n\nResources\n\nDocker Hub - Container registry\nDocker Desktop - Local container development\nPodman - Daemonless container engine\n\n\n\nRelated\n\nDependency management\nGitHub\n\n\n\n\nDev Containers\n\nDefine complete development environments as code using Docker containers with pre-configured tools, extensions, and dependencies\nEnable instant collaboration by allowing anyone to open your dashboard project in a fully configured environment via GitHub Codespaces\nEnsure consistent development experience across different operating systems and machines, eliminating “works on my machine” problems\nAutomatically install required VS Code extensions, language servers, and debugging tools when contributors open the project\nSupport both local development (with Docker Desktop) and cloud-based development (with GitHub Codespaces) using the same configuration\nReduce onboarding time for new contributors from hours to minutes by providing ready-to-use development environments\nAllow testing and development of dashboards without installing software locally, particularly useful for workshops and teaching\n\n\nResources\n\nDevelopment Containers specification\nVS Code Dev Containers extension\nGitHub Codespaces documentation\n\n\n\nRelated\n\nContainerisation\nGitHub\n\n\n\n\nExample Dev Container app\nSee this example Dev Container with a Dash app\n\nVery basic/minimal set up to show how you can let users build the app themselves/serve it in the cloud\n\n\nRelated\n\nContainerisation\nGitHub\n\n\n\n\nReleases and DOI minting\n\nCreate tagged releases at key project milestones to capture stable snapshots of your dashboard code and documentation\nMint Digital Object Identifiers (DOIs) through Zenodo integration to create permanent, citable references to specific versions\nEnsure long-term preservation through Zenodo’s commitment to maintain archived software beyond individual project lifecycles\n\nEnable reproducible research by allowing others to cite and access exact versions of dashboards used in publications\nAutomatically trigger DOI creation when GitHub releases are published, reducing manual administrative overhead\nInclude release notes that document significant changes, bug fixes, and compatibility requirements for each version\nArchive not just source code but also documentation, example data, and configuration files needed for reproduction\n\n\nResources\n\nResearch Software Development in Python tutorial\nZenodo-GitHub integration guide\nMaking Your Code Citable with Zenodo\nSemantic Versioning guidelines\n\n\n\nRelated\n\nGitHub\nVersion Control Systems, git\nDocumentation"
  },
  {
    "objectID": "list.html#build-together",
    "href": "list.html#build-together",
    "title": "Resource List",
    "section": "2. Build together",
    "text": "2. Build together\n\nDocumentation\n\nCreate comprehensive README files that explain what the dashboard does, how to install it, and how to use it\n\nProvide instructions on using containers/Code Spaces\n\nDocument code with clear comments and docstrings so future maintainers can understand the logic\nProvide step-by-step setup instructions that work for users with different technical backgrounds\nInclude examples and screenshots to help users understand expected outputs and functionality\nMaintain changelogs and release notes to help users track updates and breaking changes over time\nDocument data sources, update frequencies, and any manual processes required to keep dashboards current\nCreate contributor guides to help new team members understand development workflows and standards\n\n\nResources\n\nWrite the Docs - Documentation guide\nREADME template for research software\nKeep a Changelog\n\n\n\nRelated\n\nVersion Control Systems, git\nGitHub\nDev Containers\n\n\n\n\nLicensing\n\nChoose open source licenses that allow others to use, modify, and distribute your dashboard code freely\nEnsure license compatibility when using third-party libraries and datasets in your project\nInclude clear license files in your repository to establish legal permissions for long-term use\nConsider data licensing separately from code licensing, especially for research datasets with different restrictions\nUse permissive licenses like MIT or Apache 2.0 to maximise accessibility and adoption by other researchers\nDocument any trademark or attribution requirements for logos, branding, or institutional acknowledgements\nUnderstand institutional policies around intellectual property and open source software release\n\n\nResources\n\nChoose a License - Simple license picker\nOpen Source Initiative - License list\nCreative Commons - Data and content licensing\n\n\n\nRelated\n\nGitHub\nDocumentation\n\n\n\n\nCommunity management\n\nUse GitHub Issues to track bugs, feature requests, and general discussions about dashboard improvements\nCreate issue templates that guide users to provide helpful information when reporting problems or suggesting features\nSet up GitHub Discussions for broader conversations about dashboard usage, best practices, and community questions\nEstablish clear communication channels (mailing lists, Slack, Discord) where community members can ask for help and share experiences\nRecognise contributors through acknowledgements in documentation, contributor lists, and release notes\nCreate governance documents that outline decision-making processes and community standards\nHost regular community calls or meetings to discuss roadmap priorities and gather feedback\nBe aware of recorded gender-based hostility and uninclusive environment in OS\n\nGender differences and bias in open source: pull request acceptance of women versus men (Terrell et al., 2017)\n\nOur results show that women’s pull requests tend to be accepted more often than men’s, yet women’s acceptance rates are higher only when they are not identifiable as women. In the context of existing theories of gender in the workplace, plausible explanations include the presence of gender bias in open source, survivorship and self-selection bias, and women being held to higher performance standards.\n\nDiscrimination, misogyny and harassment: Examples from OSS: content analysis of women-focused online discussion forums (Singh & Brandon, 2022)\n\nOpen Source Software (OSS) communities are notorious for discrimination and hostility towards women and currently, only 2–3 percent of OSS developers are women.\n\n\n\n\nResources\n\nGitHub Community Standards\nOpen Source Guides - Building Welcoming Communities\nCHAOSS Community Health Metrics\n\n\n\nRelated\n\nGitHub\nDocumentation\n\n\n\n\nCode review and collaboration\n\nImplement pull request workflows that require code review before changes are merged to maintain quality\nUse branch protection rules to prevent direct commits to main branches and ensure all changes go through review\nSet up automated checks (linting, testing, security scans) that run on every pull request\nCreate clear contribution guidelines that explain coding standards, testing requirements, and review processes\nUse draft pull requests for early feedback on work-in-progress features and major changes\nEncourage pair programming and collaborative development sessions to share knowledge across the team\nMaintain a welcoming tone in code reviews that focuses on improving code rather than criticising contributors\n\n\nResources\n\nGitHub Pull Request best practices\nCode Review Guidelines\nContributing to Open Source Projects\n\n\n\nRelated\n\nGitHub\nTesting\nDocumentation\n\n\n\n\nOnboarding and mentorship\n\nCreate “good first issue” labels to help new contributors find approachable tasks to start with\nDevelop step-by-step onboarding guides that walk newcomers through setting up development environments\nPair experienced contributors with newcomers as mentors for their first few contributions\nHost coding workshops, hackathons, or sprint events to bring community members together\nRecord video tutorials showing how to contribute to different parts of the dashboard project\nMaintain up-to-date contributor documentation that explains project structure and development workflows\nCelebrate first-time contributors publicly to encourage continued participation\n\n\nResources\n\nFirst Timers Only - Friendly OSS community\nMozilla’s Community Participation Guidelines\nOpen Source Mentorship Programs\n\n\n\nRelated\n\nDocumentation\nDev Containers\nCommunity management\n\n\n\n\nSustainability planning\n\nDevelop succession plans that identify key roles and knowledge areas that need continuity\nCreate detailed handover documentation for critical maintenance tasks and decision-making processes\nEstablish funding strategies for long-term hosting, domain names, and infrastructure costs\nBuild relationships with institutional partners who can provide ongoing support or hosting\nDocument dependencies on external services and create contingency plans if they become unavailable\nTrain multiple community members in essential skills like deployment, data updates, and troubleshooting\nConsider transferring projects to established organisations or foundations for long-term stewardship\n\n\nResources\n\nSustaining Open Source Software\nSoftware Sustainability Institute\nFAIR4RS Principles\n\n\n\nRelated\n\nDocumentation\nCommunity management\nReleases and DOI minting"
  },
  {
    "objectID": "list.html#build-cheaply",
    "href": "list.html#build-cheaply",
    "title": "Resource List",
    "section": "3. Build cheaply",
    "text": "3. Build cheaply\n\nStatic Web Apps\n\nDo you need a server to support your webapp or can you build it as a static site, leveraging JavaScript etc.?\nCan go purely HTML, JS, etc.\n\nSo many resources available\nGreat libraries available: Leaflet.js, Observable\n\nOr can stick with R and Python via Quarto\n\n\nResources\n\nQuarto\nIntroduction to HTML, CSS and JS\n\n\n\nRelated\n\nQuarto\n\n\n\n\nQuarto\n\nAn incredible, Open-Source tool\nEasy to use for Python and R users\nCreate static pages that can be served via GitHub pages\nCan use various interactive plotting Python and R libraries\n\nQuarto interactivity docs\n\n\n\nResources\n\nBasic dashboards in Quarto: introducing simple ways to plot interactive maps and basic dashboards\nQuarto interactivity docs\n\n\n\nRelated\n\nStatic Web Apps\nGitHub"
  },
  {
    "objectID": "list.html#think-outside-the-box",
    "href": "list.html#think-outside-the-box",
    "title": "Resource List",
    "section": "4. Think outside the box",
    "text": "4. Think outside the box\n\nPython/R in the Browser\n\nInstead of setting up a server to run Python, can we make it run in the user’s browser?\nQuarto live is one option\n\nIntegrated with Quarto, so again can be set up to run in GitHub pages\nAllows the users to interact with and see the code directly\nGreat educational resource\n\nVoici: turn Jupyter notebooks into static web applications\n\nExample Voici dashboard\n\n\n\nRelated\n\nQuarto\nStatic Web Apps\nGitHub"
  },
  {
    "objectID": "list.html#other-interesting-linksresources",
    "href": "list.html#other-interesting-linksresources",
    "title": "Resource List",
    "section": "Other interesting links/resources",
    "text": "Other interesting links/resources\n\nMarimo notebooks: Jupyter alternative\n\n\nPublications\n\nHoffenson, Steven, Cory Philippe, Zuting Chen, Christian Barrientos, Zhongyuan Yu, Brian Chell, and Mark Blackburn. 2023. “Graphical Features of Interactive Dashboards Have Little Influence on Engineering Students Performing a Design Task.” International Journal of Human-Computer Studies 180 (103121): 103121.\nRossi, Fernanda S., Meredith C. B. Adams, Gregory Aarons, and Mark P. McGovern. 2025. “From Glitter to Gold: Recommendations for Effective Dashboards from Design through Sustainment.” Implementation Science: IS 20 (1): 16.\nWu, Elwin, Jennifer Villani, Alissa Davis, Naleef Fareed, Daniel R. Harris, Timothy R. Huerta, Marc R. LaRochelle, Cortney C. Miller, and Emmanuel A. Oga. 2020. “Community Dashboards to Support Data-Informed Decision-Making in the HEALing Communities Study.” Drug and Alcohol Dependence 217 (108331): 108331."
  }
]